# This is a basic workflow to help you get started with Actions

name: test-main

on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  get-release-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get Latest Versions
        run: |
          export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          apps=("app1" "app2")
          echo "{}" > stack_versions.json
          for app in "${apps[@]}"
          do
            latestRelease=$(gh release list -R BenHesketh21/gitops-release-branches --json name,tagName,isLatest,createdAt -q "[.[]|select(.tagName | startswith(\"${app}-main\"))]|.[0]")
            echo ${latestRelease} | jq .
            version=$(echo "${latestRelease}" | jq -r '.tagName')
            version_without_app=$(echo ${version} | sed "s ${app}-  g")
            echo "version: ${version_without_app}"
            echo "${app}"
            yq e -iP ".${app}=\"${version_without_app}\"" stack_versions.json -o=json
            cat stack_versions.json | jq .
          done
      - uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: stack_versions_artifact
      
          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: stack_versions.json
  # This workflow contains a single job called "build"
  apps:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: get-release-versions
    environment: test
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
    strategy:
      matrix:
        app: [app1, app2]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: stack_versions_artifact
      - name: Update ${{ matrix.app }} Version
        run: |
          version=$(jq -r .${{ matrix.app }} $GITHUB_WORKSPACE/stack_versions.json)
          current_version=$(yq e ".image.tag" charts/${{ matrix.app }}/values/test/main/version.yml)
          if [[ "${current_version}" == "${version}" ]]
          then
            echo "Version already deployed"
            exit 0
          fi
          yq e -i ".image.tag=\"${version/${{ matrix.app }}-/}\"" charts/${{ matrix.app }}/values/test/main/version.yml
          git config --global user.name BenHesketh21
          git config --global user.email heskethben0@gmail.com
          git checkout -b "${{ matrix.app }}-${version}-${{ github.run_id }}"
          git add charts/${{ matrix.app }}/values/test/main/version.yml
          git commit -m "[skip actions] Updating ${{ matrix.app }} to ${version}"
          git push https://BenHesketh21:${PUSH_TOKEN}@github.com/BenHesketh21/gitops-release-branches-argo.git "${{ matrix.app }}-${version}-${{ github.run_id }}"
          gh pr create --title "${{ matrix.app }}-${version}" --body "${{ matrix.app }}-${version}" --head "${{ matrix.app }}-${version}-${{ github.run_id }}" --base main
          pr_number=$(gh pr list --head "${{ matrix.app }}-${version}-${{ github.run_id }}" --base main --json number -q .[0].number)
          merged="false"
          max_attempts=2
          attempt=0
          set +e
          while [[ "${merged}" == "false" ]] && [[ "${attempt}" -lt "${max_attempts}" ]]
          do
            attempt=$((attempt+1))
            echo "Attempt: ${attempt}"
            gh pr merge "${pr_number}" --auto -d --squash
            if [[ "$?" == "0" ]]
            then
              merged=true
            fi
          done
          set -e